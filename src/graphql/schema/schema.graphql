type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  luxID: String!
  bookingsMade: [Booking!]!
  role: ROLE!
}

type Booking {
  id: ID!
  user: User!
  time: String! # DateTime is typically represented as a String in ISO format in GraphQL
  duration: Float! # Decimal types can be represented as Float in GraphQL
  room: Room!
  userId: ID!
  roomId: ID!
}

type Room {
  id: ID!
  name: String!
  active: Boolean!
  bookings: [Booking!]!
}

enum ROLE {
  ADMIN
  STANDARD
}

# Queries can be defined based on what you need. Here are some basic ones:
type Query {
  users: [User!]!
  user(id: ID!): User
}

# Mutations for creating and updating the entities
type Mutation {
  createUser(firstName: String!, lastName: String!, email: String!, luxID: String!, password: String!, role: ROLE): User!
}